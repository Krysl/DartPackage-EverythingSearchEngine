// ignore_for_file: camel_case_types, non_constant_identifier_names, constant_identifier_names, prefer_expression_function_bodies

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to Everything
class EverythingBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  EverythingBase(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  EverythingBase.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// write search state
  void SetSearchW(
    LPCWSTR lpString,
  ) {
    return _SetSearchW(
      lpString,
    );
  }

  late final _SetSearchWPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LPCWSTR)>>(
          'Everything_SetSearchW');
  late final _SetSearchW = _SetSearchWPtr.asFunction<void Function(LPCWSTR)>();

  void SetSearchA(
    LPCSTR lpString,
  ) {
    return _SetSearchA(
      lpString,
    );
  }

  late final _SetSearchAPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LPCSTR)>>(
          'Everything_SetSearchA');
  late final _SetSearchA = _SetSearchAPtr.asFunction<void Function(LPCSTR)>();

  void SetMatchPath(
    int bEnable,
  ) {
    return _SetMatchPath(
      bEnable,
    );
  }

  late final _SetMatchPathPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(BOOL)>>(
          'Everything_SetMatchPath');
  late final _SetMatchPath = _SetMatchPathPtr.asFunction<void Function(int)>();

  void SetMatchCase(
    int bEnable,
  ) {
    return _SetMatchCase(
      bEnable,
    );
  }

  late final _SetMatchCasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(BOOL)>>(
          'Everything_SetMatchCase');
  late final _SetMatchCase = _SetMatchCasePtr.asFunction<void Function(int)>();

  void SetMatchWholeWord(
    int bEnable,
  ) {
    return _SetMatchWholeWord(
      bEnable,
    );
  }

  late final _SetMatchWholeWordPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(BOOL)>>(
          'Everything_SetMatchWholeWord');
  late final _SetMatchWholeWord =
      _SetMatchWholeWordPtr.asFunction<void Function(int)>();

  void SetRegex(
    int bEnable,
  ) {
    return _SetRegex(
      bEnable,
    );
  }

  late final _SetRegexPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(BOOL)>>(
          'Everything_SetRegex');
  late final _SetRegex = _SetRegexPtr.asFunction<void Function(int)>();

  void SetMax(
    int dwMax,
  ) {
    return _SetMax(
      dwMax,
    );
  }

  late final _SetMaxPtr = _lookup<ffi.NativeFunction<ffi.Void Function(DWORD)>>(
      'Everything_SetMax');
  late final _SetMax = _SetMaxPtr.asFunction<void Function(int)>();

  void SetOffset(
    int dwOffset,
  ) {
    return _SetOffset(
      dwOffset,
    );
  }

  late final _SetOffsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DWORD)>>(
          'Everything_SetOffset');
  late final _SetOffset = _SetOffsetPtr.asFunction<void Function(int)>();

  void SetReplyWindow(
    HWND hWnd,
  ) {
    return _SetReplyWindow(
      hWnd,
    );
  }

  late final _SetReplyWindowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HWND)>>(
          'Everything_SetReplyWindow');
  late final _SetReplyWindow =
      _SetReplyWindowPtr.asFunction<void Function(HWND)>();

  void SetReplyID(
    int dwId,
  ) {
    return _SetReplyID(
      dwId,
    );
  }

  late final _SetReplyIDPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DWORD)>>(
          'Everything_SetReplyID');
  late final _SetReplyID = _SetReplyIDPtr.asFunction<void Function(int)>();

  void SetSort(
    int dwSort,
  ) {
    return _SetSort(
      dwSort,
    );
  }

  late final _SetSortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DWORD)>>(
          'Everything_SetSort');
  late final _SetSort = _SetSortPtr.asFunction<void Function(int)>();

  void SetRequestFlags(
    int dwRequestFlags,
  ) {
    return _SetRequestFlags(
      dwRequestFlags,
    );
  }

  late final _SetRequestFlagsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DWORD)>>(
          'Everything_SetRequestFlags');
  late final _SetRequestFlags =
      _SetRequestFlagsPtr.asFunction<void Function(int)>();

  /// read search state
  int GetMatchPath() {
    return _GetMatchPath();
  }

  late final _GetMatchPathPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('Everything_GetMatchPath');
  late final _GetMatchPath = _GetMatchPathPtr.asFunction<int Function()>();

  int GetMatchCase() {
    return _GetMatchCase();
  }

  late final _GetMatchCasePtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('Everything_GetMatchCase');
  late final _GetMatchCase = _GetMatchCasePtr.asFunction<int Function()>();

  int GetMatchWholeWord() {
    return _GetMatchWholeWord();
  }

  late final _GetMatchWholeWordPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>(
          'Everything_GetMatchWholeWord');
  late final _GetMatchWholeWord =
      _GetMatchWholeWordPtr.asFunction<int Function()>();

  int GetRegex() {
    return _GetRegex();
  }

  late final _GetRegexPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('Everything_GetRegex');
  late final _GetRegex = _GetRegexPtr.asFunction<int Function()>();

  int GetMax() {
    return _GetMax();
  }

  late final _GetMaxPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>('Everything_GetMax');
  late final _GetMax = _GetMaxPtr.asFunction<int Function()>();

  int GetOffset() {
    return _GetOffset();
  }

  late final _GetOffsetPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>('Everything_GetOffset');
  late final _GetOffset = _GetOffsetPtr.asFunction<int Function()>();

  LPCSTR GetSearchA() {
    return _GetSearchA();
  }

  late final _GetSearchAPtr =
      _lookup<ffi.NativeFunction<LPCSTR Function()>>('Everything_GetSearchA');
  late final _GetSearchA = _GetSearchAPtr.asFunction<LPCSTR Function()>();

  LPCWSTR GetSearchW() {
    return _GetSearchW();
  }

  late final _GetSearchWPtr =
      _lookup<ffi.NativeFunction<LPCWSTR Function()>>('Everything_GetSearchW');
  late final _GetSearchW = _GetSearchWPtr.asFunction<LPCWSTR Function()>();

  int GetLastError() {
    return _GetLastError();
  }

  late final _GetLastErrorPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>('Everything_GetLastError');
  late final _GetLastError = _GetLastErrorPtr.asFunction<int Function()>();

  HWND GetReplyWindow() {
    return _GetReplyWindow();
  }

  late final _GetReplyWindowPtr =
      _lookup<ffi.NativeFunction<HWND Function()>>('Everything_GetReplyWindow');
  late final _GetReplyWindow = _GetReplyWindowPtr.asFunction<HWND Function()>();

  int GetReplyID() {
    return _GetReplyID();
  }

  late final _GetReplyIDPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>('Everything_GetReplyID');
  late final _GetReplyID = _GetReplyIDPtr.asFunction<int Function()>();

  int GetSort() {
    return _GetSort();
  }

  late final _GetSortPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>('Everything_GetSort');
  late final _GetSort = _GetSortPtr.asFunction<int Function()>();

  int GetRequestFlags() {
    return _GetRequestFlags();
  }

  late final _GetRequestFlagsPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>(
          'Everything_GetRequestFlags');
  late final _GetRequestFlags =
      _GetRequestFlagsPtr.asFunction<int Function()>();

  /// execute query
  int QueryA(
    int bWait,
  ) {
    return _QueryA(
      bWait,
    );
  }

  late final _QueryAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(BOOL)>>('Everything_QueryA');
  late final _QueryA = _QueryAPtr.asFunction<int Function(int)>();

  int QueryW(
    int bWait,
  ) {
    return _QueryW(
      bWait,
    );
  }

  late final _QueryWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(BOOL)>>('Everything_QueryW');
  late final _QueryW = _QueryWPtr.asFunction<int Function(int)>();

  /// query reply
  int IsQueryReply(
    int message,
    int wParam,
    int lParam,
    int dwId,
  ) {
    return _IsQueryReply(
      message,
      wParam,
      lParam,
      dwId,
    );
  }

  late final _IsQueryReplyPtr =
      _lookup<ffi.NativeFunction<BOOL Function(UINT, WPARAM, LPARAM, DWORD)>>(
          'Everything_IsQueryReply');
  late final _IsQueryReply =
      _IsQueryReplyPtr.asFunction<int Function(int, int, int, int)>();

  /// write result state
  void SortResultsByPath() {
    return _SortResultsByPath();
  }

  late final _SortResultsByPathPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'Everything_SortResultsByPath');
  late final _SortResultsByPath =
      _SortResultsByPathPtr.asFunction<void Function()>();

  /// read result state
  int GetNumFileResults() {
    return _GetNumFileResults();
  }

  late final _GetNumFileResultsPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>(
          'Everything_GetNumFileResults');
  late final _GetNumFileResults =
      _GetNumFileResultsPtr.asFunction<int Function()>();

  int GetNumFolderResults() {
    return _GetNumFolderResults();
  }

  late final _GetNumFolderResultsPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>(
          'Everything_GetNumFolderResults');
  late final _GetNumFolderResults =
      _GetNumFolderResultsPtr.asFunction<int Function()>();

  int GetNumResults() {
    return _GetNumResults();
  }

  late final _GetNumResultsPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>('Everything_GetNumResults');
  late final _GetNumResults = _GetNumResultsPtr.asFunction<int Function()>();

  int GetTotFileResults() {
    return _GetTotFileResults();
  }

  late final _GetTotFileResultsPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>(
          'Everything_GetTotFileResults');
  late final _GetTotFileResults =
      _GetTotFileResultsPtr.asFunction<int Function()>();

  int GetTotFolderResults() {
    return _GetTotFolderResults();
  }

  late final _GetTotFolderResultsPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>(
          'Everything_GetTotFolderResults');
  late final _GetTotFolderResults =
      _GetTotFolderResultsPtr.asFunction<int Function()>();

  int GetTotResults() {
    return _GetTotResults();
  }

  late final _GetTotResultsPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>('Everything_GetTotResults');
  late final _GetTotResults = _GetTotResultsPtr.asFunction<int Function()>();

  int IsVolumeResult(
    int dwIndex,
  ) {
    return _IsVolumeResult(
      dwIndex,
    );
  }

  late final _IsVolumeResultPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD)>>(
          'Everything_IsVolumeResult');
  late final _IsVolumeResult =
      _IsVolumeResultPtr.asFunction<int Function(int)>();

  int IsFolderResult(
    int dwIndex,
  ) {
    return _IsFolderResult(
      dwIndex,
    );
  }

  late final _IsFolderResultPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD)>>(
          'Everything_IsFolderResult');
  late final _IsFolderResult =
      _IsFolderResultPtr.asFunction<int Function(int)>();

  int IsFileResult(
    int dwIndex,
  ) {
    return _IsFileResult(
      dwIndex,
    );
  }

  late final _IsFileResultPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD)>>(
          'Everything_IsFileResult');
  late final _IsFileResult = _IsFileResultPtr.asFunction<int Function(int)>();

  LPCWSTR GetResultFileNameW(
    int dwIndex,
  ) {
    return _GetResultFileNameW(
      dwIndex,
    );
  }

  late final _GetResultFileNameWPtr =
      _lookup<ffi.NativeFunction<LPCWSTR Function(DWORD)>>(
          'Everything_GetResultFileNameW');
  late final _GetResultFileNameW =
      _GetResultFileNameWPtr.asFunction<LPCWSTR Function(int)>();

  LPCSTR GetResultFileNameA(
    int dwIndex,
  ) {
    return _GetResultFileNameA(
      dwIndex,
    );
  }

  late final _GetResultFileNameAPtr =
      _lookup<ffi.NativeFunction<LPCSTR Function(DWORD)>>(
          'Everything_GetResultFileNameA');
  late final _GetResultFileNameA =
      _GetResultFileNameAPtr.asFunction<LPCSTR Function(int)>();

  LPCWSTR GetResultPathW(
    int dwIndex,
  ) {
    return _GetResultPathW(
      dwIndex,
    );
  }

  late final _GetResultPathWPtr =
      _lookup<ffi.NativeFunction<LPCWSTR Function(DWORD)>>(
          'Everything_GetResultPathW');
  late final _GetResultPathW =
      _GetResultPathWPtr.asFunction<LPCWSTR Function(int)>();

  LPCSTR GetResultPathA(
    int dwIndex,
  ) {
    return _GetResultPathA(
      dwIndex,
    );
  }

  late final _GetResultPathAPtr =
      _lookup<ffi.NativeFunction<LPCSTR Function(DWORD)>>(
          'Everything_GetResultPathA');
  late final _GetResultPathA =
      _GetResultPathAPtr.asFunction<LPCSTR Function(int)>();

  int GetResultFullPathNameA(
    int dwIndex,
    LPSTR buf,
    int bufsize,
  ) {
    return _GetResultFullPathNameA(
      dwIndex,
      buf,
      bufsize,
    );
  }

  late final _GetResultFullPathNameAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(DWORD, LPSTR, DWORD)>>(
          'Everything_GetResultFullPathNameA');
  late final _GetResultFullPathNameA =
      _GetResultFullPathNameAPtr.asFunction<int Function(int, LPSTR, int)>();

  int GetResultFullPathNameW(
    int dwIndex,
    LPWSTR wbuf,
    int wbuf_size_in_wchars,
  ) {
    return _GetResultFullPathNameW(
      dwIndex,
      wbuf,
      wbuf_size_in_wchars,
    );
  }

  late final _GetResultFullPathNameWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(DWORD, LPWSTR, DWORD)>>(
          'Everything_GetResultFullPathNameW');
  late final _GetResultFullPathNameW =
      _GetResultFullPathNameWPtr.asFunction<int Function(int, LPWSTR, int)>();

  int GetResultListSort() {
    return _GetResultListSort();
  }

  late final _GetResultListSortPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>(
          'Everything_GetResultListSort');
  late final _GetResultListSort =
      _GetResultListSortPtr.asFunction<int Function()>();

  int GetResultListRequestFlags() {
    return _GetResultListRequestFlags();
  }

  late final _GetResultListRequestFlagsPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>(
          'Everything_GetResultListRequestFlags');
  late final _GetResultListRequestFlags =
      _GetResultListRequestFlagsPtr.asFunction<int Function()>();

  LPCWSTR GetResultExtensionW(
    int dwIndex,
  ) {
    return _GetResultExtensionW(
      dwIndex,
    );
  }

  late final _GetResultExtensionWPtr =
      _lookup<ffi.NativeFunction<LPCWSTR Function(DWORD)>>(
          'Everything_GetResultExtensionW');
  late final _GetResultExtensionW =
      _GetResultExtensionWPtr.asFunction<LPCWSTR Function(int)>();

  LPCSTR GetResultExtensionA(
    int dwIndex,
  ) {
    return _GetResultExtensionA(
      dwIndex,
    );
  }

  late final _GetResultExtensionAPtr =
      _lookup<ffi.NativeFunction<LPCSTR Function(DWORD)>>(
          'Everything_GetResultExtensionA');
  late final _GetResultExtensionA =
      _GetResultExtensionAPtr.asFunction<LPCSTR Function(int)>();

  int GetResultSize(
    int dwIndex,
    ffi.Pointer<LARGE_INTEGER> lpSize,
  ) {
    return _GetResultSize(
      dwIndex,
      lpSize,
    );
  }

  late final _GetResultSizePtr = _lookup<
          ffi.NativeFunction<BOOL Function(DWORD, ffi.Pointer<LARGE_INTEGER>)>>(
      'Everything_GetResultSize');
  late final _GetResultSize = _GetResultSizePtr.asFunction<
      int Function(int, ffi.Pointer<LARGE_INTEGER>)>();

  int GetResultDateCreated(
    int dwIndex,
    ffi.Pointer<FILETIME> lpDateCreated,
  ) {
    return _GetResultDateCreated(
      dwIndex,
      lpDateCreated,
    );
  }

  late final _GetResultDateCreatedPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, ffi.Pointer<FILETIME>)>>(
          'Everything_GetResultDateCreated');
  late final _GetResultDateCreated = _GetResultDateCreatedPtr.asFunction<
      int Function(int, ffi.Pointer<FILETIME>)>();

  int GetResultDateModified(
    int dwIndex,
    ffi.Pointer<FILETIME> lpDateModified,
  ) {
    return _GetResultDateModified(
      dwIndex,
      lpDateModified,
    );
  }

  late final _GetResultDateModifiedPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, ffi.Pointer<FILETIME>)>>(
          'Everything_GetResultDateModified');
  late final _GetResultDateModified = _GetResultDateModifiedPtr.asFunction<
      int Function(int, ffi.Pointer<FILETIME>)>();

  int GetResultDateAccessed(
    int dwIndex,
    ffi.Pointer<FILETIME> lpDateAccessed,
  ) {
    return _GetResultDateAccessed(
      dwIndex,
      lpDateAccessed,
    );
  }

  late final _GetResultDateAccessedPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, ffi.Pointer<FILETIME>)>>(
          'Everything_GetResultDateAccessed');
  late final _GetResultDateAccessed = _GetResultDateAccessedPtr.asFunction<
      int Function(int, ffi.Pointer<FILETIME>)>();

  int GetResultAttributes(
    int dwIndex,
  ) {
    return _GetResultAttributes(
      dwIndex,
    );
  }

  late final _GetResultAttributesPtr =
      _lookup<ffi.NativeFunction<DWORD Function(DWORD)>>(
          'Everything_GetResultAttributes');
  late final _GetResultAttributes =
      _GetResultAttributesPtr.asFunction<int Function(int)>();

  LPCWSTR GetResultFileListFileNameW(
    int dwIndex,
  ) {
    return _GetResultFileListFileNameW(
      dwIndex,
    );
  }

  late final _GetResultFileListFileNameWPtr =
      _lookup<ffi.NativeFunction<LPCWSTR Function(DWORD)>>(
          'Everything_GetResultFileListFileNameW');
  late final _GetResultFileListFileNameW =
      _GetResultFileListFileNameWPtr.asFunction<LPCWSTR Function(int)>();

  LPCSTR GetResultFileListFileNameA(
    int dwIndex,
  ) {
    return _GetResultFileListFileNameA(
      dwIndex,
    );
  }

  late final _GetResultFileListFileNameAPtr =
      _lookup<ffi.NativeFunction<LPCSTR Function(DWORD)>>(
          'Everything_GetResultFileListFileNameA');
  late final _GetResultFileListFileNameA =
      _GetResultFileListFileNameAPtr.asFunction<LPCSTR Function(int)>();

  int GetResultRunCount(
    int dwIndex,
  ) {
    return _GetResultRunCount(
      dwIndex,
    );
  }

  late final _GetResultRunCountPtr =
      _lookup<ffi.NativeFunction<DWORD Function(DWORD)>>(
          'Everything_GetResultRunCount');
  late final _GetResultRunCount =
      _GetResultRunCountPtr.asFunction<int Function(int)>();

  int GetResultDateRun(
    int dwIndex,
    ffi.Pointer<FILETIME> lpDateRun,
  ) {
    return _GetResultDateRun(
      dwIndex,
      lpDateRun,
    );
  }

  late final _GetResultDateRunPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, ffi.Pointer<FILETIME>)>>(
          'Everything_GetResultDateRun');
  late final _GetResultDateRun = _GetResultDateRunPtr.asFunction<
      int Function(int, ffi.Pointer<FILETIME>)>();

  int GetResultDateRecentlyChanged(
    int dwIndex,
    ffi.Pointer<FILETIME> lpDateRecentlyChanged,
  ) {
    return _GetResultDateRecentlyChanged(
      dwIndex,
      lpDateRecentlyChanged,
    );
  }

  late final _GetResultDateRecentlyChangedPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, ffi.Pointer<FILETIME>)>>(
          'Everything_GetResultDateRecentlyChanged');
  late final _GetResultDateRecentlyChanged = _GetResultDateRecentlyChangedPtr
      .asFunction<int Function(int, ffi.Pointer<FILETIME>)>();

  LPCWSTR GetResultHighlightedFileNameW(
    int dwIndex,
  ) {
    return _GetResultHighlightedFileNameW(
      dwIndex,
    );
  }

  late final _GetResultHighlightedFileNameWPtr =
      _lookup<ffi.NativeFunction<LPCWSTR Function(DWORD)>>(
          'Everything_GetResultHighlightedFileNameW');
  late final _GetResultHighlightedFileNameW =
      _GetResultHighlightedFileNameWPtr.asFunction<LPCWSTR Function(int)>();

  LPCSTR GetResultHighlightedFileNameA(
    int dwIndex,
  ) {
    return _GetResultHighlightedFileNameA(
      dwIndex,
    );
  }

  late final _GetResultHighlightedFileNameAPtr =
      _lookup<ffi.NativeFunction<LPCSTR Function(DWORD)>>(
          'Everything_GetResultHighlightedFileNameA');
  late final _GetResultHighlightedFileNameA =
      _GetResultHighlightedFileNameAPtr.asFunction<LPCSTR Function(int)>();

  LPCWSTR GetResultHighlightedPathW(
    int dwIndex,
  ) {
    return _GetResultHighlightedPathW(
      dwIndex,
    );
  }

  late final _GetResultHighlightedPathWPtr =
      _lookup<ffi.NativeFunction<LPCWSTR Function(DWORD)>>(
          'Everything_GetResultHighlightedPathW');
  late final _GetResultHighlightedPathW =
      _GetResultHighlightedPathWPtr.asFunction<LPCWSTR Function(int)>();

  LPCSTR GetResultHighlightedPathA(
    int dwIndex,
  ) {
    return _GetResultHighlightedPathA(
      dwIndex,
    );
  }

  late final _GetResultHighlightedPathAPtr =
      _lookup<ffi.NativeFunction<LPCSTR Function(DWORD)>>(
          'Everything_GetResultHighlightedPathA');
  late final _GetResultHighlightedPathA =
      _GetResultHighlightedPathAPtr.asFunction<LPCSTR Function(int)>();

  LPCWSTR GetResultHighlightedFullPathAndFileNameW(
    int dwIndex,
  ) {
    return _GetResultHighlightedFullPathAndFileNameW(
      dwIndex,
    );
  }

  late final _GetResultHighlightedFullPathAndFileNameWPtr =
      _lookup<ffi.NativeFunction<LPCWSTR Function(DWORD)>>(
          'Everything_GetResultHighlightedFullPathAndFileNameW');
  late final _GetResultHighlightedFullPathAndFileNameW =
      _GetResultHighlightedFullPathAndFileNameWPtr.asFunction<
          LPCWSTR Function(int)>();

  LPCSTR GetResultHighlightedFullPathAndFileNameA(
    int dwIndex,
  ) {
    return _GetResultHighlightedFullPathAndFileNameA(
      dwIndex,
    );
  }

  late final _GetResultHighlightedFullPathAndFileNameAPtr =
      _lookup<ffi.NativeFunction<LPCSTR Function(DWORD)>>(
          'Everything_GetResultHighlightedFullPathAndFileNameA');
  late final _GetResultHighlightedFullPathAndFileNameA =
      _GetResultHighlightedFullPathAndFileNameAPtr.asFunction<
          LPCSTR Function(int)>();

  /// reset state and free any allocated memory
  void Reset() {
    return _Reset();
  }

  late final _ResetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Everything_Reset');
  late final _Reset = _ResetPtr.asFunction<void Function()>();

  void CleanUp() {
    return _CleanUp();
  }

  late final _CleanUpPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Everything_CleanUp');
  late final _CleanUp = _CleanUpPtr.asFunction<void Function()>();

  int GetMajorVersion() {
    return _GetMajorVersion();
  }

  late final _GetMajorVersionPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>(
          'Everything_GetMajorVersion');
  late final _GetMajorVersion =
      _GetMajorVersionPtr.asFunction<int Function()>();

  int GetMinorVersion() {
    return _GetMinorVersion();
  }

  late final _GetMinorVersionPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>(
          'Everything_GetMinorVersion');
  late final _GetMinorVersion =
      _GetMinorVersionPtr.asFunction<int Function()>();

  int GetRevision() {
    return _GetRevision();
  }

  late final _GetRevisionPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>('Everything_GetRevision');
  late final _GetRevision = _GetRevisionPtr.asFunction<int Function()>();

  int GetBuildNumber() {
    return _GetBuildNumber();
  }

  late final _GetBuildNumberPtr = _lookup<ffi.NativeFunction<DWORD Function()>>(
      'Everything_GetBuildNumber');
  late final _GetBuildNumber = _GetBuildNumberPtr.asFunction<int Function()>();

  int Exit() {
    return _Exit();
  }

  late final _ExitPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('Everything_Exit');
  late final _Exit = _ExitPtr.asFunction<int Function()>();

  int IsDBLoaded() {
    return _IsDBLoaded();
  }

  late final _IsDBLoadedPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('Everything_IsDBLoaded');
  late final _IsDBLoaded = _IsDBLoadedPtr.asFunction<int Function()>();

  int IsAdmin() {
    return _IsAdmin();
  }

  late final _IsAdminPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('Everything_IsAdmin');
  late final _IsAdmin = _IsAdminPtr.asFunction<int Function()>();

  int IsAppData() {
    return _IsAppData();
  }

  late final _IsAppDataPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('Everything_IsAppData');
  late final _IsAppData = _IsAppDataPtr.asFunction<int Function()>();

  int RebuildDB() {
    return _RebuildDB();
  }

  late final _RebuildDBPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('Everything_RebuildDB');
  late final _RebuildDB = _RebuildDBPtr.asFunction<int Function()>();

  int UpdateAllFolderIndexes() {
    return _UpdateAllFolderIndexes();
  }

  late final _UpdateAllFolderIndexesPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>(
          'Everything_UpdateAllFolderIndexes');
  late final _UpdateAllFolderIndexes =
      _UpdateAllFolderIndexesPtr.asFunction<int Function()>();

  int SaveDB() {
    return _SaveDB();
  }

  late final _SaveDBPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('Everything_SaveDB');
  late final _SaveDB = _SaveDBPtr.asFunction<int Function()>();

  int SaveRunHistory() {
    return _SaveRunHistory();
  }

  late final _SaveRunHistoryPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('Everything_SaveRunHistory');
  late final _SaveRunHistory = _SaveRunHistoryPtr.asFunction<int Function()>();

  int DeleteRunHistory() {
    return _DeleteRunHistory();
  }

  late final _DeleteRunHistoryPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>(
          'Everything_DeleteRunHistory');
  late final _DeleteRunHistory =
      _DeleteRunHistoryPtr.asFunction<int Function()>();

  int GetTargetMachine() {
    return _GetTargetMachine();
  }

  late final _GetTargetMachinePtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>(
          'Everything_GetTargetMachine');
  late final _GetTargetMachine =
      _GetTargetMachinePtr.asFunction<int Function()>();

  int GetRunCountFromFileNameW(
    LPCWSTR lpFileName,
  ) {
    return _GetRunCountFromFileNameW(
      lpFileName,
    );
  }

  late final _GetRunCountFromFileNameWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCWSTR)>>(
          'Everything_GetRunCountFromFileNameW');
  late final _GetRunCountFromFileNameW =
      _GetRunCountFromFileNameWPtr.asFunction<int Function(LPCWSTR)>();

  int GetRunCountFromFileNameA(
    LPCSTR lpFileName,
  ) {
    return _GetRunCountFromFileNameA(
      lpFileName,
    );
  }

  late final _GetRunCountFromFileNameAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCSTR)>>(
          'Everything_GetRunCountFromFileNameA');
  late final _GetRunCountFromFileNameA =
      _GetRunCountFromFileNameAPtr.asFunction<int Function(LPCSTR)>();

  int SetRunCountFromFileNameW(
    LPCWSTR lpFileName,
    int dwRunCount,
  ) {
    return _SetRunCountFromFileNameW(
      lpFileName,
      dwRunCount,
    );
  }

  late final _SetRunCountFromFileNameWPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCWSTR, DWORD)>>(
          'Everything_SetRunCountFromFileNameW');
  late final _SetRunCountFromFileNameW =
      _SetRunCountFromFileNameWPtr.asFunction<int Function(LPCWSTR, int)>();

  int SetRunCountFromFileNameA(
    LPCSTR lpFileName,
    int dwRunCount,
  ) {
    return _SetRunCountFromFileNameA(
      lpFileName,
      dwRunCount,
    );
  }

  late final _SetRunCountFromFileNameAPtr =
      _lookup<ffi.NativeFunction<BOOL Function(LPCSTR, DWORD)>>(
          'Everything_SetRunCountFromFileNameA');
  late final _SetRunCountFromFileNameA =
      _SetRunCountFromFileNameAPtr.asFunction<int Function(LPCSTR, int)>();

  int IncRunCountFromFileNameW(
    LPCWSTR lpFileName,
  ) {
    return _IncRunCountFromFileNameW(
      lpFileName,
    );
  }

  late final _IncRunCountFromFileNameWPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCWSTR)>>(
          'Everything_IncRunCountFromFileNameW');
  late final _IncRunCountFromFileNameW =
      _IncRunCountFromFileNameWPtr.asFunction<int Function(LPCWSTR)>();

  int IncRunCountFromFileNameA(
    LPCSTR lpFileName,
  ) {
    return _IncRunCountFromFileNameA(
      lpFileName,
    );
  }

  late final _IncRunCountFromFileNameAPtr =
      _lookup<ffi.NativeFunction<DWORD Function(LPCSTR)>>(
          'Everything_IncRunCountFromFileNameA');
  late final _IncRunCountFromFileNameA =
      _IncRunCountFromFileNameAPtr.asFunction<int Function(LPCSTR)>();
}

typedef LPCWSTR = ffi.Pointer<WCHAR>;
typedef WCHAR = ffi.WChar;
typedef LPCSTR = ffi.Pointer<CHAR>;
typedef CHAR = ffi.Char;
typedef BOOL = ffi.Int;
typedef DWORD = ffi.UnsignedLong;
typedef HWND = ffi.Pointer<HWND__>;

class HWND__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

typedef UINT = ffi.UnsignedInt;
typedef WPARAM = UINT_PTR;
typedef UINT_PTR = ffi.UnsignedLongLong;
typedef LPARAM = LONG_PTR;
typedef LONG_PTR = ffi.LongLong;
typedef LPSTR = ffi.Pointer<CHAR>;
typedef LPWSTR = ffi.Pointer<WCHAR>;
typedef LARGE_INTEGER = _LARGE_INTEGER;

class _LARGE_INTEGER extends ffi.Union {
  external UnnamedStruct1 u;

  @LONGLONG()
  external int QuadPart;
}

class UnnamedStruct1 extends ffi.Struct {
  @DWORD()
  external int LowPart;

  @LONG()
  external int HighPart;
}

typedef LONG = ffi.Long;
typedef LONGLONG = ffi.LongLong;
typedef FILETIME = _FILETIME;

class _FILETIME extends ffi.Struct {
  @DWORD()
  external int dwLowDateTime;

  @DWORD()
  external int dwHighDateTime;
}

const int EVERYTHING_OK = 0;

const int EVERYTHING_ERROR_MEMORY = 1;

const int EVERYTHING_ERROR_IPC = 2;

const int EVERYTHING_ERROR_REGISTERCLASSEX = 3;

const int EVERYTHING_ERROR_CREATEWINDOW = 4;

const int EVERYTHING_ERROR_CREATETHREAD = 5;

const int EVERYTHING_ERROR_INVALIDINDEX = 6;

const int EVERYTHING_ERROR_INVALIDCALL = 7;

const int EVERYTHING_ERROR_INVALIDREQUEST = 8;

const int EVERYTHING_ERROR_INVALIDPARAMETER = 9;

const int EVERYTHING_SORT_NAME_ASCENDING = 1;

const int EVERYTHING_SORT_NAME_DESCENDING = 2;

const int EVERYTHING_SORT_PATH_ASCENDING = 3;

const int EVERYTHING_SORT_PATH_DESCENDING = 4;

const int EVERYTHING_SORT_SIZE_ASCENDING = 5;

const int EVERYTHING_SORT_SIZE_DESCENDING = 6;

const int EVERYTHING_SORT_EXTENSION_ASCENDING = 7;

const int EVERYTHING_SORT_EXTENSION_DESCENDING = 8;

const int EVERYTHING_SORT_TYPE_NAME_ASCENDING = 9;

const int EVERYTHING_SORT_TYPE_NAME_DESCENDING = 10;

const int EVERYTHING_SORT_DATE_CREATED_ASCENDING = 11;

const int EVERYTHING_SORT_DATE_CREATED_DESCENDING = 12;

const int EVERYTHING_SORT_DATE_MODIFIED_ASCENDING = 13;

const int EVERYTHING_SORT_DATE_MODIFIED_DESCENDING = 14;

const int EVERYTHING_SORT_ATTRIBUTES_ASCENDING = 15;

const int EVERYTHING_SORT_ATTRIBUTES_DESCENDING = 16;

const int EVERYTHING_SORT_FILE_LIST_FILENAME_ASCENDING = 17;

const int EVERYTHING_SORT_FILE_LIST_FILENAME_DESCENDING = 18;

const int EVERYTHING_SORT_RUN_COUNT_ASCENDING = 19;

const int EVERYTHING_SORT_RUN_COUNT_DESCENDING = 20;

const int EVERYTHING_SORT_DATE_RECENTLY_CHANGED_ASCENDING = 21;

const int EVERYTHING_SORT_DATE_RECENTLY_CHANGED_DESCENDING = 22;

const int EVERYTHING_SORT_DATE_ACCESSED_ASCENDING = 23;

const int EVERYTHING_SORT_DATE_ACCESSED_DESCENDING = 24;

const int EVERYTHING_SORT_DATE_RUN_ASCENDING = 25;

const int EVERYTHING_SORT_DATE_RUN_DESCENDING = 26;

const int EVERYTHING_REQUEST_FILE_NAME = 1;

const int EVERYTHING_REQUEST_PATH = 2;

const int EVERYTHING_REQUEST_FULL_PATH_AND_FILE_NAME = 4;

const int EVERYTHING_REQUEST_EXTENSION = 8;

const int EVERYTHING_REQUEST_SIZE = 16;

const int EVERYTHING_REQUEST_DATE_CREATED = 32;

const int EVERYTHING_REQUEST_DATE_MODIFIED = 64;

const int EVERYTHING_REQUEST_DATE_ACCESSED = 128;

const int EVERYTHING_REQUEST_ATTRIBUTES = 256;

const int EVERYTHING_REQUEST_FILE_LIST_FILE_NAME = 512;

const int EVERYTHING_REQUEST_RUN_COUNT = 1024;

const int EVERYTHING_REQUEST_DATE_RUN = 2048;

const int EVERYTHING_REQUEST_DATE_RECENTLY_CHANGED = 4096;

const int EVERYTHING_REQUEST_HIGHLIGHTED_FILE_NAME = 8192;

const int EVERYTHING_REQUEST_HIGHLIGHTED_PATH = 16384;

const int EVERYTHING_REQUEST_HIGHLIGHTED_FULL_PATH_AND_FILE_NAME = 32768;

const int EVERYTHING_TARGET_MACHINE_X86 = 1;

const int EVERYTHING_TARGET_MACHINE_X64 = 2;

const int EVERYTHING_TARGET_MACHINE_ARM = 3;
